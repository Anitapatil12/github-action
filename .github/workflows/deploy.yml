name: Deploy VPC and IAM Role to CloudFormation (AWS) using GitHub Actions

on:
  push:
    branches:
      - dev

jobs:
  cloudformation-deploy:
    name: Deploy CloudFormation
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Install AWS CLI
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@master
      - run: aws --version

      # Step 4: Set Environment Variables
      - name: Set Deployment Environment Variables
        run: |
          BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)
          if [[ $BRANCH == 'main' ]]; then
            echo "DEPLOYMENT_ENV=prod" >> $GITHUB_ENV
            echo "STACK_NAME=prod-stack" >> $GITHUB_ENV
          elif [[ $BRANCH == 'qa' ]]; then
            echo "DEPLOYMENT_ENV=qa" >> $GITHUB_ENV
            echo "STACK_NAME=qa-stack" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_ENV=dev" >> $GITHUB_ENV
            echo "STACK_NAME=dev-stack" >> $GITHUB_ENV
          fi

      # Step 5: Print Variables
      - name: Print Environment Variables
        run: |
          echo "Environment: ${{ env.DEPLOYMENT_ENV }}"
          echo "Stack Name: ${{ env.STACK_NAME }}"

      # Step 6: Install cfn-lint
      - name: Install cfn-lint
        run: pip install cfn-lint

      # Step 7: Validate CloudFormation Template
      - name: Validate CloudFormation Template
        run: |
          cfn-lint --version
          cfn-lint -t ./template.yml

      # Step 8: Prepare Parameter Overrides
      - name: Prepare Parameter Overrides
        id: prepare_params
        run: |
          params=$(cat ./params.${{ env.DEPLOYMENT_ENV }}.json | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | join(" ")')
          echo "params=$params" >> $GITHUB_ENV

      # Step 9: Deploy to CloudFormation
      - name: Deploy to CloudFormation
        run: |
          aws cloudformation deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --template-file ./template.yml \
            --parameter-overrides ${{ env.params }} \
            --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --no-fail-on-empty-changeset